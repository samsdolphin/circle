// Generated by gencpp from file traj_gen/PolySplineXYZ.msg
// DO NOT EDIT!


#ifndef TRAJ_GEN_MESSAGE_POLYSPLINEXYZ_H
#define TRAJ_GEN_MESSAGE_POLYSPLINEXYZ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <traj_gen/PolySpline.h>
#include <traj_gen/PolySpline.h>
#include <traj_gen/PolySpline.h>

namespace traj_gen
{
template <class ContainerAllocator>
struct PolySplineXYZ_
{
  typedef PolySplineXYZ_<ContainerAllocator> Type;

  PolySplineXYZ_()
    : is_valid(false)
    , spline_x()
    , spline_y()
    , spline_z()
    , n_seg(0)
    , poly_order(0)
    , knot_time()  {
    }
  PolySplineXYZ_(const ContainerAllocator& _alloc)
    : is_valid(false)
    , spline_x(_alloc)
    , spline_y(_alloc)
    , spline_z(_alloc)
    , n_seg(0)
    , poly_order(0)
    , knot_time(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _is_valid_type;
  _is_valid_type is_valid;

   typedef  ::traj_gen::PolySpline_<ContainerAllocator>  _spline_x_type;
  _spline_x_type spline_x;

   typedef  ::traj_gen::PolySpline_<ContainerAllocator>  _spline_y_type;
  _spline_y_type spline_y;

   typedef  ::traj_gen::PolySpline_<ContainerAllocator>  _spline_z_type;
  _spline_z_type spline_z;

   typedef int8_t _n_seg_type;
  _n_seg_type n_seg;

   typedef int8_t _poly_order_type;
  _poly_order_type poly_order;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _knot_time_type;
  _knot_time_type knot_time;





  typedef boost::shared_ptr< ::traj_gen::PolySplineXYZ_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::traj_gen::PolySplineXYZ_<ContainerAllocator> const> ConstPtr;

}; // struct PolySplineXYZ_

typedef ::traj_gen::PolySplineXYZ_<std::allocator<void> > PolySplineXYZ;

typedef boost::shared_ptr< ::traj_gen::PolySplineXYZ > PolySplineXYZPtr;
typedef boost::shared_ptr< ::traj_gen::PolySplineXYZ const> PolySplineXYZConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::traj_gen::PolySplineXYZ_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::traj_gen::PolySplineXYZ_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace traj_gen

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'traj_gen': ['/home/sam/catkin_ws/src/traj_gen/msg', '/home/sam/catkin_ws/src/traj_gen/msg'], 'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::traj_gen::PolySplineXYZ_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traj_gen::PolySplineXYZ_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::traj_gen::PolySplineXYZ_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::traj_gen::PolySplineXYZ_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traj_gen::PolySplineXYZ_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traj_gen::PolySplineXYZ_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::traj_gen::PolySplineXYZ_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cde8ea48996e4cbc3defb260ac40b943";
  }

  static const char* value(const ::traj_gen::PolySplineXYZ_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcde8ea48996e4cbcULL;
  static const uint64_t static_value2 = 0x3defb260ac40b943ULL;
};

template<class ContainerAllocator>
struct DataType< ::traj_gen::PolySplineXYZ_<ContainerAllocator> >
{
  static const char* value()
  {
    return "traj_gen/PolySplineXYZ";
  }

  static const char* value(const ::traj_gen::PolySplineXYZ_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::traj_gen::PolySplineXYZ_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool is_valid\n\
traj_gen/PolySpline spline_x\n\
traj_gen/PolySpline spline_y \n\
traj_gen/PolySpline spline_z\n\
int8 n_seg\n\
int8 poly_order\n\
float64[] knot_time \n\
\n\
================================================================================\n\
MSG: traj_gen/PolySpline\n\
traj_gen/PolyCoeff[] poly_coeff\n\
float64[] knot_time \n\
int8 n_seg\n\
bool is_valid\n\
\n\
\n\
\n\
================================================================================\n\
MSG: traj_gen/PolyCoeff\n\
float64[] coeff\n\
int8 poly_order\n\
\n\
\n\
";
  }

  static const char* value(const ::traj_gen::PolySplineXYZ_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::traj_gen::PolySplineXYZ_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_valid);
      stream.next(m.spline_x);
      stream.next(m.spline_y);
      stream.next(m.spline_z);
      stream.next(m.n_seg);
      stream.next(m.poly_order);
      stream.next(m.knot_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PolySplineXYZ_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::traj_gen::PolySplineXYZ_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::traj_gen::PolySplineXYZ_<ContainerAllocator>& v)
  {
    s << indent << "is_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_valid);
    s << indent << "spline_x: ";
    s << std::endl;
    Printer< ::traj_gen::PolySpline_<ContainerAllocator> >::stream(s, indent + "  ", v.spline_x);
    s << indent << "spline_y: ";
    s << std::endl;
    Printer< ::traj_gen::PolySpline_<ContainerAllocator> >::stream(s, indent + "  ", v.spline_y);
    s << indent << "spline_z: ";
    s << std::endl;
    Printer< ::traj_gen::PolySpline_<ContainerAllocator> >::stream(s, indent + "  ", v.spline_z);
    s << indent << "n_seg: ";
    Printer<int8_t>::stream(s, indent + "  ", v.n_seg);
    s << indent << "poly_order: ";
    Printer<int8_t>::stream(s, indent + "  ", v.poly_order);
    s << indent << "knot_time[]" << std::endl;
    for (size_t i = 0; i < v.knot_time.size(); ++i)
    {
      s << indent << "  knot_time[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.knot_time[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRAJ_GEN_MESSAGE_POLYSPLINEXYZ_H
